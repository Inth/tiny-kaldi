diff --git a/.gitignore b/.gitignore
index 267fdc91f..9a5bf83ba 100644
--- a/.gitignore
+++ b/.gitignore
@@ -29,6 +29,13 @@ core
 *.a
 *.lib
 
+# WebAssembly artifacts
+*.bc
+/src/probe/*.js
+/src/probe/*.wasm
+/src/probe/*.wasm.map
+/src/probe/*.wast
+
 # Test log files
 *.testlog
 
@@ -84,6 +91,7 @@ GSYMS
 /tools/pocolm/
 /tools/ATLAS/
 /tools/atlas3.8.3.tar.gz
+/tools/gsl
 /tools/irstlm/
 /tools/mitlm/
 /tools/openfst
@@ -106,7 +114,7 @@ GSYMS
 /tools/openfst-1.6.5.tar.gz
 /tools/openfst-1.6.5/
 /tools/openfst-1.6.7.tar.gz
-/tools/openfst-1.6.7/
+/tools/openfst-1.6.7
 /tools/BeamformIt/
 /tools/libsndfile-1.0.25.tar.gz
 /tools/libsndfile-1.0.25/
@@ -127,6 +135,7 @@ GSYMS
 /tools/sctk-2.4.8
 /tools/srilm
 /tools/CLAPACK_include
+/tools/CLAPACK-WA
 /tools/kaldi_lm
 /tools/env.sh
 /tools/g2p-r1668.tar.gz
diff --git a/src/Makefile b/src/Makefile
index 07b7947f3..e15879fd7 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -31,7 +31,7 @@ include kaldi.mk
 
 # Reset the default goal, so that the all target will become default
 .DEFAULT_GOAL :=
-all: $(SUBDIRS) matrix/test
+all: $(SUBDIRS) # matrix/test
 	-echo Done
 
 mklibdir:
diff --git a/src/configure b/src/configure
index 1186c6d12..416347e2d 100755
--- a/src/configure
+++ b/src/configure
@@ -88,6 +88,7 @@ Configuration options:
   --atlas-root=DIR      ATLAS root directory [default=../tools/ATLAS/]
   --openblas-root=DIR   OpenBLAS root directory
   --clapack-root=DIR    CLAPACK root directory
+  --gsl-root=DIR        GSL root directory
   --mkl-root=DIR        MKL root directory
   --mkl-libdir=DIR      MKL library directory
   --mkl-threading=LIB   MKL threading layer [default=sequential]
@@ -865,6 +866,9 @@ do
   --clapack-root=*)
     GetSwitchExistingPathOrDie CLAPACKROOT "$1"
     shift ;;
+  --gsl-root=*)
+    GetSwitchExistingPathOrDie GSLROOT "$1"
+    shift ;;
   --openblas-root=*)
     GetSwitchExistingPathOrDie OPENBLASROOT "$1"
     shift ;;
@@ -1136,6 +1140,48 @@ if $android ; then
 
   echo "Successfully configured for Android with OpenBLAS from $OPENBLASROOT."
 
+elif [ "$(basename $CC)" == "emcc" ]; then
+  # emscripten (WebAssembly)
+
+  if [ -z "$CLAPACKROOT" ]; then
+    failure "Must specify the location of CLAPACK with --clapack-root option (and it must exist)"
+  fi
+  if [ ! -f ../tools/CLAPACK/clapack.h ]; then
+    failure "could not find file ../tools/CLAPACK/clapack.h"
+  fi
+  if [ ! -d "$CLAPACKROOT" ]; then
+    failure "The directory $CLAPACKROOT does not exist"
+  fi
+
+  if [ -z "$GSLROOT" ]; then
+    failure "Must specify the location of GSL with --gsl-root option (and it must exist)"
+  fi
+  if [ ! -d "$GSLROOT" ]; then
+    failure "The directory $GSLROOT does not exist"
+  fi
+
+  for lib in F2CLIBS/libf2c.bc lapack_WA.bc libcblaswr.bc; do
+    CLAPACKLIBS="$CLAPACKLIBS $CLAPACKROOT/$lib"
+  done
+  if [ "`uname`" == "Darwin"  ]; then
+    CLAPACKLIBS="$CLAPACKLIBS $GSLROOT/cblas/.libs/libgslcblas.dylib"
+  elif [ "`uname`" == "Linux" ]; then
+    CLAPACKLIBS="$CLAPACKLIBS $GSLROOT/cblas/.libs/libgslcblas.so"
+  else
+    failure "Emscripten is not supported on this platform."
+  fi
+
+  echo "CLAPACKLIBS = $CLAPACKLIBS" >> kaldi.mk
+
+  # Also check for cblas.h and f2c.h
+  echo "Using CLAPACK libs from $CLAPACKROOT as the linear algebra library."
+  if [ ! -f makefiles/wasm_clapack.mk ]; then
+    failure "makefiles/wasm_clapack.mk not found."
+  fi
+  cat makefiles/wasm_clapack.mk >> kaldi.mk
+  echo "Warning (CLAPACK): this part of the configure process is not properly tested and may not work."
+  echo "Successfully configured for WebAssembly with CLAPACK libs from $CLAPACKROOT"
+
 elif [ "`uname`" == "Darwin" ]; then
   # Check for Darwin first, because we later call uname -o (for Cygwin)
   # which crashes on Darwin.
diff --git a/src/ivector/ivector-extractor.cc b/src/ivector/ivector-extractor.cc
index c3a122281..1ad75599d 100644
--- a/src/ivector/ivector-extractor.cc
+++ b/src/ivector/ivector-extractor.cc
@@ -190,16 +190,10 @@ void IvectorExtractor::ComputeDerivedVars() {
   U_.Resize(NumGauss(), IvectorDim() * (IvectorDim() + 1) / 2);
   Sigma_inv_M_.resize(NumGauss());
 
-  // Note, we could have used RunMultiThreaded for this and similar tasks we
-  // have here, but we found that we don't get as complete CPU utilization as we
-  // could because some tasks finish before others.
-  {
-    TaskSequencerConfig sequencer_opts;
-    sequencer_opts.num_threads = g_num_threads;
-    TaskSequencer<IvectorExtractorComputeDerivedVarsClass> sequencer(
-        sequencer_opts);
-    for (int32 i = 0; i < NumGauss(); i++)
-      sequencer.Run(new IvectorExtractorComputeDerivedVarsClass(this, i));
+  for (int32 i = 0; i < NumGauss(); i++) {
+    IvectorExtractorComputeDerivedVarsClass *t = new IvectorExtractorComputeDerivedVarsClass(this, i);
+    (*t)();
+    delete t;
   }
   KALDI_LOG << "Done.";
 }
diff --git a/src/makefiles/default_rules.mk b/src/makefiles/default_rules.mk
index 14989e8af..8ce978e7f 100644
--- a/src/makefiles/default_rules.mk
+++ b/src/makefiles/default_rules.mk
@@ -1,6 +1,10 @@
 
 SHELL := /bin/bash
 
+ifeq ($(notdir ${CC}), emcc)
+  IS_EMSCRIPTEN = true
+endif
+
 ifeq ($(KALDI_FLAVOR), dynamic)
   ifeq ($(shell uname), Darwin)
     ifdef ANDROIDINC # cross-compiling enabled on host MacOS
@@ -26,6 +30,11 @@ ifeq ($(KALDI_FLAVOR), dynamic)
     $(error Dynamic libraries not supported on this platform. Run configure with --static flag.)
   endif
   XDEPENDS =
+else ifdef IS_EMSCRIPTEN
+  ifdef LIBNAME
+    LIBFILE = $(LIBNAME).bc
+  endif
+  XDEPENDS = $(foreach dep,$(ADDLIBS), $(dir $(dep))$(notdir $(basename $(dep))).bc)
 else
   ifdef LIBNAME
     LIBFILE = $(LIBNAME).a
@@ -33,14 +42,23 @@ else
   XDEPENDS = $(ADDLIBS)
 endif
 
+ifdef IS_EMSCRIPTEN
+all: $(LIBFILE)
+else
 all: $(LIBFILE) $(BINFILES)
+endif
 
 
 ifdef LIBNAME
 
+ifdef IS_EMSCRIPTEN
+$(LIBNAME).bc: $(OBJFILES)
+	$(CXX) -o $(LIBNAME).bc $(OBJFILES)
+else
 $(LIBNAME).a: $(OBJFILES)
 	$(AR) -cr $(LIBNAME).a $(OBJFILES)
 	$(RANLIB) $(LIBNAME).a
+endif
 
 ifeq ($(KALDI_FLAVOR), dynamic)
 # the LIBFILE is not the same as $(LIBNAME).a
@@ -78,11 +96,14 @@ endif
 %.a:
 	$(MAKE) -C ${@D} ${@F}
 
+%.bc:
+	$(MAKE) -C ${@D} ${@F}
+
 %.so:
 	$(MAKE) -C ${@D} ${@F}
 
 clean:
-	-rm -f *.o *.a *.so $(TESTFILES) $(BINFILES) $(TESTOUTPUTS) tmp* *.tmp *.testlog
+	-rm -f *.o *.a *.bc *.so $(TESTFILES) $(BINFILES) $(TESTOUTPUTS) tmp* *.tmp *.testlog
 
 distclean: clean
 	-rm -f .depend.mk
diff --git a/src/makefiles/wasm_clapack.mk b/src/makefiles/wasm_clapack.mk
new file mode 100644
index 000000000..f49b30f2b
--- /dev/null
+++ b/src/makefiles/wasm_clapack.mk
@@ -0,0 +1,32 @@
+# WebAssembly/CLAPACK configuration
+
+ifndef DOUBLE_PRECISION
+$(error DOUBLE_PRECISION not defined.)
+endif
+ifndef OPENFSTINC
+$(error OPENFSTINC not defined.)
+endif
+ifndef OPENFSTLIBS
+$(error OPENFSTLIBS not defined.)
+endif
+
+CXXFLAGS = -std=c++11 -I.. -I$(OPENFSTINC) $(EXTRA_CXXFLAGS) \
+           -Wall -Wno-sign-compare -Wno-unused-local-typedefs \
+           -Wno-deprecated-declarations -Winit-self \
+           -DKALDI_DOUBLEPRECISION=$(DOUBLE_PRECISION) \
+           -DHAVE_CXXABI_H -DHAVE_CLAPACK -I../../tools/CLAPACK \
+           -g # -DKALDI_PARANOID
+
+ifeq ($(KALDI_FLAVOR), dynamic)
+CXXFLAGS += -fPIC
+endif
+
+# Compiler specific flags
+COMPILER = $(shell $(CXX) -v 2>&1)
+ifeq ($(findstring clang,$(COMPILER)),clang)
+# Suppress annoying clang warnings that are perfectly valid per spec.
+CXXFLAGS += -Wno-mismatched-tags
+endif
+
+LDFLAGS = $(EXTRA_LDFLAGS) $(OPENFSTLDFLAGS) -g
+LDLIBS = $(EXTRA_LDLIBS) $(OPENFSTLIBS) $(CLAPACKLIBS) -lm # -lpthread -ldl
diff --git a/tools/extras/check_dependencies.sh b/tools/extras/check_dependencies.sh
index 6c7343697..e14090f05 100755
--- a/tools/extras/check_dependencies.sh
+++ b/tools/extras/check_dependencies.sh
@@ -59,7 +59,7 @@ case $compiler_ver_info in
 esac
 
 # Cannot check this without a compiler.
-if have "$CXX" && ! echo "#include <zlib.h>" | $CXX -E - >&/dev/null; then
+if have "$CXX" && ! $CXX -I/usr/include -E "$(dirname $0)/zlib_test.h" >&/dev/null; then
   echo "$0: zlib is not installed."
   add_packages zlib-devel zlib1g-dev
 fi
diff --git a/tools/extras/zlib_test.h b/tools/extras/zlib_test.h
new file mode 100644
index 000000000..4470a1fd4
--- /dev/null
+++ b/tools/extras/zlib_test.h
@@ -0,0 +1 @@
+#include <zlib.h>
