notifications:
  email: false

git:
  depth: false

language: shell # https://config.travis-ci.com/ref/language

jobs:
  exclude:
    - os: linux
  include:
    - &linux_job
      env: DOCKCROSS_IMAGE=manylinux2010-x64 OPENBLAS_TARGET=NEHALEM
      os: linux
      services:
        - docker
      script:
        - export HELPER_IMAGE="${DOCKER_REGISTRY}/vosk-api-build:${DOCKCROSS_IMAGE}"
        - export VERSION="$(git describe --tags --always)"
        - export DOCKER_BUILD_ARGS="--build-arg DOCKCROSS_IMAGE=$DOCKCROSS_IMAGE --build-arg OPENBLAS_TARGET=$OPENBLAS_TARGET"
        - date; docker run --rm --privileged multiarch/qemu-user-static:register
        - date; echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        # stage s1
        - date; docker pull ${HELPER_IMAGE}.s1 || true
        - date; docker build --tag ${HELPER_IMAGE}.s1 --target s1 --cache-from ${HELPER_IMAGE}.s1 ${DOCKER_BUILD_ARGS} travis
        - date; docker push ${HELPER_IMAGE}.s1
        # stage s2
        - date; docker pull ${HELPER_IMAGE}.s2 || true
        - date; docker build --tag ${HELPER_IMAGE}.s2 --target s2 --cache-from ${HELPER_IMAGE}.s1 --cache-from ${HELPER_IMAGE}.s2 ${DOCKER_BUILD_ARGS} travis
        - date; docker push ${HELPER_IMAGE}.s2
        # final stage
        - date; docker pull ${HELPER_IMAGE} || true
        - date; docker build --tag ${HELPER_IMAGE} --cache-from ${HELPER_IMAGE}.s1 --cache-from ${HELPER_IMAGE}.s2 --cache-from ${HELPER_IMAGE} ${DOCKER_BUILD_ARGS} travis
        - date; docker push ${HELPER_IMAGE}
        # build wheels
        - date; docker run --rm -v "$(pwd):/io" -e "VERSION=$VERSION" ${HELPER_IMAGE} /io/travis/build-wheels.sh
    - <<: *linux_job
      env: DOCKCROSS_IMAGE=linux-armv6 OPENBLAS_TARGET=ARMV6
    - <<: *linux_job
      env: DOCKCROSS_IMAGE=linux-armv7 OPENBLAS_TARGET=ARMV7
    - &windows_job
      os: windows
      cache:
        directories:
          - $HOME/AppData/Local/Temp/chocolatey
          - travis/openfst
          - travis/kaldi
      before_cache:
        - rm $HOME/AppData/Local/Temp/chocolatey/*.log
      # install:
      #   - choco install swig    --no-progress -y
      #   - choco install python3 --no-progress -y --version 3.6.8 
      #   - C:/Python36/python -m pip install --upgrade pip wheel setuptools conan
      #   - C:/Python36/Scripts/conan user
      #   - C:/Python36/Scripts/conan install travis
      script:
        - echo $PATH
        - |
          # Build OpenFST in travis/openfst
          set -eo pipefail
          export OPENFST_DIR="${TRAVIS_BUILD_DIR}/travis/openfst"
          mkdir -p "$OPENFST_DIR"
          cd "$OPENFST_DIR"
          if [ -f .valid-cache ]; then
            echo "Reusing cached OpenFST build artifacts: " $(cat .valid-cache)
            find . -type f -name '*.ilk' -or -name '*.obj' -or -name '*.pdb' -delete
          else
            if [ -d .git ]; then
              echo "Deleting cached build artifacts from failed OpenFST build"
              find -mindepth 1 -delete
            fi
            git clone -b winport --single-branch https://github.com/kkm000/openfst .
            curl https://patch-diff.githubusercontent.com/raw/kkm000/openfst/pull/22.patch | git apply -v
            cmake -S . -B build64 -G "Visual Studio 15 2017 Win64" "-DCMAKE_TOOLCHAIN_FILE=${TRAVIS_BUILD_DIR}/conan_paths.cmake" -DHAVE_FAR=ON -DHAVE_NGRAM=ON -DHAVE_LOOKAHEAD=ON
            travis_wait 30 sh -c "cmake --build build64 | tail -n100"
            git describe --always > .valid-cache
            echo "OpenFST build successful: " $(cat .valid-cache)
          fi
        - |
          # # Build Kaldi in travis/kaldi
          # set -xeo pipefail
          # export KALDI_DIR="${TRAVIS_BUILD_DIR}/travis/kaldi"
          # mkdir -p "$KALDI_DIR"
          # cd "$KALDI_DIR"
          # if [ -f .valid-cache ]; then
          #   echo "Reusing cached Kaldi build artifacts: " $(cat .valid-cache)
          # else
          #   if [ -d .git ]; then
          #     echo "Deleting cached build artifacts from failed Kaldi build"
          #     find -mindepth 1 -delete
          #   fi
          #   git clone -b lookahead --single-branch https://github.com/alphacep/kaldi .
          #   cd windows
          #   cp variables.props.dev variables.props
          #   win_path() {
          #     echo $1 | sed -e 's~^/\([a-z]\)/~\1:/~i' -e 's~/~\\~g'
          #   }
          #   cmake_property() {
          #     cat "$1" | grep "set($2 " | sed -e 's/.*"\(.*\)").*/\1/'
          #   }
          #   esc_sed_rhs() {
          #     echo $1 | sed -e 's~\\\([0-9]\)~\\\\\1~g'
          #   }
          #   CONAN_OPENBLAS_ROOT=$(cmake_property "${TRAVIS_BUILD_DIR}/conan_paths.cmake" CONAN_OPENBLAS_ROOT)
          #   sed -ie "s~<OPENBLASDIR>.*</OPENBLASDIR>~<OPENBLASDIR>$(esc_sed_rhs $(win_path "$CONAN_OPENBLAS_ROOT"))</OPENBLASDIR>~" variables.props
          #   sed -ie "s~<OPENFST>.*</OPENFST>~<OPENFST>$(esc_sed_rhs $(win_path "$OPENFST_DIR"))</OPENFST>~" variables.props
          #   sed -ie "s~<OPENFSTLIB>.*</OPENFSTLIB>~<OPENFSTLIB>$(esc_sed_rhs $(win_path "${OPENFST_DIR}/build64"))</OPENFSTLIB>~" variables.props
          #   cp kaldiwin_openblas.props kaldiwin.props
          #   ./generate_solution.pl --vsver vs2017 --enable-openblas
          #   ./get_version.pl
          #   SLN_PATH_WIN=$(win_path $(find "$KALDI_DIR" -type f -name '*.sln'))
          #   cat "$SLN_PATH_WIN"

          #   travis_wait 40 sh -c "set -eo pipefail; '/c/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/MSBuild/15.0/Bin/MSBuild.exe' '$SLN_PATH_WIN' -property:Configuration=Release -property:Platform=x64 -target:kaldi-online2 -maxcpucount | tail -n100"
            
          #   git describe --always > .valid-cache
          #   echo "Kaldi build successful: " $(cat .valid-cache)
          # fi
          
        # - export VERSION="$(git describe --tags --always)"
        # - cd "${TRAVIS_BUILD_DIR}/python"
        # - export DISTUTILS_DEBUG=1
        # - C:/Python36/python setup.py bdist_wheel

deploy:
  # Draft a GitHib Release for each commit
  # https://docs.travis-ci.com/user/deployment-v2/providers/releases/
  - provider: releases
    edge: true
    token: $GITHUB_TOKEN
    file: wheelhouse/*
    draft: true
    name: $VERSION
    tag_name: $TRAVIS_TAG
    on:
      all_branches: true
      condition: $GITHUB_TOKEN
  # Upload to PyPI when building a tagged commit
  # https://docs.travis-ci.com/user/deployment-v2/providers/script/
  # https://pypi.org/project/twine/
  - provider: script
    edge: true
    # pass environment variables to the container without exposing them in the logs
    script: |
      env | sed -re 's/^([^=]+)=(.*)$/export \1="\2"/g' > env.source && \
      docker run --rm \
      -v "$(pwd):/io" \
      -w /io \
      --entrypoint bash \
      library/python \
      -c "source env.source && pip install twine && twine check wheelhouse/* && twine upload wheelhouse/*"
    on:
      all_branches: true
      condition: $TRAVIS_TAG && $TWINE_USERNAME && $TWINE_PASSWORD
