notifications:
  email: false

git:
  depth: false

language: shell # https://config.travis-ci.com/ref/language

jobs:
  exclude:
    - os: linux
  include:
    - &linux_job
      env: DOCKCROSS_IMAGE=manylinux2010-x64 OPENBLAS_TARGET=NEHALEM
      os: linux
      services:
        - docker
      script:
        - export HELPER_IMAGE="${DOCKER_REGISTRY}/vosk-api-build:${DOCKCROSS_IMAGE}"
        - export VERSION="$(git describe --tags --always)"
        - export DOCKER_BUILD_ARGS="--build-arg DOCKCROSS_IMAGE=$DOCKCROSS_IMAGE --build-arg OPENBLAS_TARGET=$OPENBLAS_TARGET"
        - date; docker run --rm --privileged multiarch/qemu-user-static:register
        - date; echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        # stage s1
        - date; docker pull ${HELPER_IMAGE}.s1 || true
        - date; docker build --tag ${HELPER_IMAGE}.s1 --target s1 --cache-from ${HELPER_IMAGE}.s1 ${DOCKER_BUILD_ARGS} travis
        - date; docker push ${HELPER_IMAGE}.s1
        # stage s2
        - date; docker pull ${HELPER_IMAGE}.s2 || true
        - date; docker build --tag ${HELPER_IMAGE}.s2 --target s2 --cache-from ${HELPER_IMAGE}.s1 --cache-from ${HELPER_IMAGE}.s2 ${DOCKER_BUILD_ARGS} travis
        - date; docker push ${HELPER_IMAGE}.s2
        # final stage
        - date; docker pull ${HELPER_IMAGE} || true
        - date; docker build --tag ${HELPER_IMAGE} --cache-from ${HELPER_IMAGE}.s1 --cache-from ${HELPER_IMAGE}.s2 --cache-from ${HELPER_IMAGE} ${DOCKER_BUILD_ARGS} travis
        - date; docker push ${HELPER_IMAGE}
        # build wheels
        - date; docker run --rm -v "$(pwd):/io" -e "VERSION=$VERSION" ${HELPER_IMAGE} /io/travis/build-wheels.sh
    - <<: *linux_job
      env: DOCKCROSS_IMAGE=linux-armv6 OPENBLAS_TARGET=ARMV6
    - <<: *linux_job
      env: DOCKCROSS_IMAGE=linux-armv7 OPENBLAS_TARGET=ARMV7
    - &windows_job
      os: windows
      cache:
        directories:
          - $HOME/AppData/Local/Temp/chocolatey
          - travis/openfst
          - travis/kaldi
      before_cache:
        - find $HOME/AppData/Local/Temp/chocolatey -type f -name '*.log' -delete
      install:
        - choco install swig    --no-progress -y
        - choco install python3 --no-progress -y --version 3.6.8 
        - C:/Python36/python -m pip install --upgrade pip wheel setuptools conan
        - C:/Python36/Scripts/conan user
        - C:/Python36/Scripts/conan install travis
      script:
        - echo $PATH
        - |
          find_files_with_ext() {
            echo "Listing ${1} files in ${2}:"
            find "$2" -type f -name "*${1}"
          }
        - |
          # OpenBLAS gets installed by conan
          cmake_property() {
            cat "$1" | grep "set($2 " | sed -e 's/.*"\(.*\)").*/\1/'
          }
          export OPENBLAS_DIR=$(cmake_property "${TRAVIS_BUILD_DIR}/conan_paths.cmake" CONAN_OPENBLAS_ROOT)
          find_files_with_ext .lib "$OPENBLAS_DIR"
        - |
          # Build OpenFST in travis/openfst
          date
          set -eo pipefail
          export OPENFST_DIR="${TRAVIS_BUILD_DIR}/travis/openfst"
          mkdir -p "$OPENFST_DIR"
          cd "$OPENFST_DIR"
          if [ -f .valid-cache ]; then
            echo "Reusing cached OpenFST build artifacts: " $(cat .valid-cache)
          else
            if [ -d .git ]; then
              echo "Deleting cached build artifacts from failed OpenFST build"
              find -mindepth 1 -delete
            fi
            git clone -b winport --single-branch https://github.com/kkm000/openfst .
            curl https://patch-diff.githubusercontent.com/raw/kkm000/openfst/pull/22.patch | git apply -v
            cmake -S . -B build64 -G "Visual Studio 15 2017 Win64" -DCMAKE_CONFIGURATION_TYPES=Release "-DCMAKE_TOOLCHAIN_FILE=${TRAVIS_BUILD_DIR}/conan_paths.cmake" -DHAVE_FAR=ON -DHAVE_NGRAM=ON -DHAVE_LOOKAHEAD=ON
            travis_wait 30 sh -c "set -eo pipefail; cmake --build build64 2>&1 | tail -n100"
            git describe --always > .valid-cache
            echo "OpenFST build successful: " $(cat .valid-cache)
            echo "Removing intermediate files:"
            find . -type f -name '*.ilk' -or -name '*.obj' -or -name '*.pdb' -ls -delete
          fi
          find_files_with_ext .lib "$OPENFST_DIR"
        - |
          # Build Kaldi in travis/kaldi
          date
          set -xeo pipefail
          export KALDI_DIR="${TRAVIS_BUILD_DIR}/travis/kaldi"
          mkdir -p "$KALDI_DIR"
          cd "$KALDI_DIR"
          if [ -f .valid-cache ]; then
            echo "Reusing cached Kaldi build artifacts: " $(cat .valid-cache)
          else
            if [ -d .git ]; then
              echo "Found cached Kaldi repo. Doing git pull..."
              git pull
            else
              echo "Cloning Kaldi git repo..."
              git clone -b lookahead --single-branch https://github.com/alphacep/kaldi .
            fi
            cd windows
            if [ ! -f kaldiwin.props ]; then
              cp kaldiwin_openblas.props kaldiwin.props
            fi
            win_path() {
              # '/c/foo' -> 'c:/foo'
              echo $1 | sed -e 's~^/\([a-z]\)/~\1:/~i'
            }
            find_sln() {
              find "$KALDI_DIR" -type f -name '*.sln'
            }
            if [ ! -f variables.props ]; then
              cp variables.props.dev variables.props
              sed -ie "s~<OPENBLASDIR>.*</OPENBLASDIR>~<OPENBLASDIR>$(win_path "$OPENBLAS_DIR")</OPENBLASDIR>~" variables.props
              sed -ie "s~<OPENFST>.*</OPENFST>~<OPENFST>$(win_path "$OPENFST_DIR")</OPENFST>~" variables.props
              sed -ie "s~<OPENFSTLIB>.*</OPENFSTLIB>~<OPENFSTLIB>$(win_path "${OPENFST_DIR}/build64")</OPENFSTLIB>~" variables.props
            fi
            echo "Listing $(readlink -f variables.props):"
            cat variables.props
            SLN="$(find_sln)"
            if [ ! -f "$SLN" ]; then
              echo "Generating MSBuild Solution..."
              ./generate_solution.pl --vsver vs2017 --enable-openblas
              ./get_version.pl
              SLN="$(find_sln)"
            else
              echo "Re-using existing MSBuild Solution"
            fi
            echo "Listing projects in MSBuild Solution: ${SLN}"
            grep Project "$SLN"
            
            cd "$KALDI_DIR"
            if travis_wait 30 '/c/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/MSBuild/15.0/Bin/MSBuild.exe' \
              "$(win_path "$SLN")" \
              -consoleloggerparameters:ErrorsOnly \
              -maxcpucount \
              -property:Configuration=Release \
              -property:Platform=x64 \
              -target:kaldi-online2 \
              -target:kaldi-decoder \
              -target:kaldi-ivector \
              -target:kaldi-gmm \
              -target:kaldi-nnet3 \
              -target:kaldi-tree \
              -target:kaldi-feat \
              -target:kaldi-lat \
              -target:kaldi-hmm \
              -target:kaldi-transform \
              -target:kaldi-cudamatrix \
              -target:kaldi-matrix \
              -target:kaldi-fstext \
              -target:kaldi-util \
              -target:kaldi-base
            then
              git describe --always > .valid-cache
              echo "Kaldi build successful: " $(cat .valid-cache)
              echo "Removing intermediate files:"
              find . -type f -name '*.ilk' -or -name '*.obj' -or -name '*.pdb' -ls -delete
            else
              echo "Kaldi build unsuccessful. Keeping intermediate files. Retry the build if it timed out."
            fi
          fi
          find_files_with_ext .lib "$KALDI_DIR"
          
        # - export VERSION="$(git describe --tags --always)"
        # - cd "${TRAVIS_BUILD_DIR}/python"
        # - export DISTUTILS_DEBUG=1
        # - C:/Python36/python setup.py bdist_wheel

deploy:
  # Draft a GitHib Release for each commit
  # https://docs.travis-ci.com/user/deployment-v2/providers/releases/
  - provider: releases
    edge: true
    token: $GITHUB_TOKEN
    file: wheelhouse/*
    draft: true
    name: $VERSION
    tag_name: $TRAVIS_TAG
    on:
      all_branches: true
      condition: $GITHUB_TOKEN
  # Upload to PyPI when building a tagged commit
  # https://docs.travis-ci.com/user/deployment-v2/providers/script/
  # https://pypi.org/project/twine/
  - provider: script
    edge: true
    # pass environment variables to the container without exposing them in the logs
    script: |
      env | sed -re 's/^([^=]+)=(.*)$/export \1="\2"/g' > env.source && \
      docker run --rm \
      -v "$(pwd):/io" \
      -w /io \
      --entrypoint bash \
      library/python \
      -c "source env.source && pip install twine && twine check wheelhouse/* && twine upload wheelhouse/*"
    on:
      all_branches: true
      condition: $TRAVIS_TAG && $TWINE_USERNAME && $TWINE_PASSWORD
